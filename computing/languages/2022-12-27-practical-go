practical go

1. guiding principles
    - different programming languages or operating systems have different core values
    - go principles
    1. clarity
    2. simplicity
    3. productivity
    - note that there is no mention of performance or concurrency
    - there are languages somewhat faster than go, but they're certainly not as simple

    - "software engineering is what happens to programming when you add time and other programmers" - russ cox

    - clarity
    - "programs must be written for people to read, and only incidentally for machines to execute" - SCIP
    - "the most important skill for a programmer is the ability to effectively communicate ideas"
    - code is read many more times than it is written
    - a single piece of code will, over its lifetime, be read hundreds, maybe thousands of times
    - thus, having code which is clear means it will be maintainable
    - simplicity
    - "simplicity is the prerequisite for reliability" - djikstra
    - "controlling complexity is the essence of computer programming" - kernighan
    - "there are two ways of constructing a software design: one way is to make it so simple that there are obviously no deficiencies, and the other way is to make it so complicated that there are no obvious deficiencies. the first method is far more difficult" - C.A.R. Hoare
    - complexity turns reliable software into unreliable software
    - complexity is what kills software projects
    - therefore, simplicity is the highest goal of go
    - productivity
    - "design is the art of arranging code to work today, and be changeable forever" - sandi metz
    - the joke goes that go was designed while waiting for a c++ program to compile
    - to say that go is a language designed to be productive is an understanding that is it build for software design in the large, at industrial scale

2. identifiers
    - choose identifiers for clarity, not brevity
    - identifier length
        - sometimes people critize the go style for recommending short variable names
        - as rob pike said: "go programmers want the *right* length identifiers"
        - andrew gerrand suggests "the greater the distance between a name's declaration and its uses, the longer the name should be"
    - a variable's name should describe its contents
        - don't let package names steal good variable names
    - use a consistent naming style
        - use the same receiver name for every method on a struct
            - the convention for short receiver names in go is at odds with the advice provided so far
            - this is just one of the choices made early on that has become the preferred style, just like CamelCase rather than snake_case
        - other variables named with single letters are
            - i, j, k: loops
            - n: length
            - k, v: key, value 
            - a, b are generic names for parameters comparing two variables of the same type
            - x, y: are generic names for local variables created for comparison
            - s: shorthand for parameters of type string
    - use a consistent declaration style
        - go has at least six different ways to declare a variable
            - this is something the go designers recognize was probably a mistake, but its too late to change it now
        - when declaring a variable without initialization, use the `var syntax
            - the `var` acts as a clue to say that this variable has been *deliberately* declared as the zero value of the indicated type
        - when declaring and explicitly initializing a variable, use `:=`

3. commentary
    - summary
        - dave thomas and andrew hunt (the pragmatic programmer) "good code has lots of comments, bad code requires lots of comments"
        - comments should do one (and only one) of three things
            1. the comment should explain *what* the thing does
            2. the comment should explain *how* the thing does what it does
            3. the comment should explain *why* the thing is what it is

            - the first form is ideal for commentary on public symbols
            - the second form is ideal for commentary inside a method
            - the third form is unique as it does not displace the first two
                - comments such as these record hard won battles for deep understanding of the business logic
                - links to issues, design documents, RFCs, or specifications that provide more background are always helpful




    - comments on variables and constants should describe their contents not 
    their purpose
        - from the google style guide: any public function that is not both obvious *and* short must be commented
        - any function in a library must be commented regardless of length or complexity
    - always document public symbols
        - brian kernighan: "don't comment bad code, rewrite it"
        - rather than commenting a block of code, refactor it

4. package design
    - the size of a unit of software differs by language. In C the unit is a function, as C offers little else. In Java, the unit of software is commonly mis_believed to be the class. In Go, the unit of software is not the function, or the type, or the method, but instead the _package.


    - a good package starts with its name
    - good package names should be unique
    - avoid package names like base, common, or util
    - return early rather than nesting deeply
    - make the zero value useful
    - avoid package level state

5. project/module structure
    - summary
        - in the future go developers will use the term module and project interchangeably
    - consider fewer, larger packages
        - arrange code into files by import statements
            - start each package with one .go file
            - give that file the same name as the folder
                - e.g. package http should be placed in a file called http.go in a directory named http
            - as your package grows, you may choose to split apart the various *responsibilities* into different files
                e.g. messages.go, client.go, server.go
        - go eschewed elaborate type hierarchy
            - this is generally a good thing
            - don't make the mistake or replacing that wit han elaborate package hierarchy
            - if you find you have created intermediate directories in your project which contain no .go files, you may have fallen afoul of the desire to create a taxonomy of your source code
        - use internal packages to reduce your public API surface
    - keep package main as small as possible
        - your main function AND main package should do as little as possible
        - this is bc main.main acts a singleton (there can only be one main function in a program)
        - writing tests for main is hard, you can't even reference main.main from a test
        - you should aim to move as much of your business logic *out* of your main function and ideally out of your main package too
        - func main() should parse flags, open connections to databases, loggers, then hand off execution to a high level object

6. api design
    - design apis that are hard to misuse
    - design apis for their default use case
        - discourage the use of nil as a parameter
        - prefer var args to []T parameters
            - if the parameter is a slice, callers can pass an empty slice or nil to the function and the compiler will be happy
            - this adds extra load because you *should* cover these cases in your testing
    - let functions define the behavior they require
    - understanding nil

9. concurrency
    - the go team have gone to great lengths to make concurrency in go cheap (in terms of hardware resources) and performant, however it's possible to use go's concurrency features to write code which is neither performant nor reliable
    - here is some advice to avoid some of the pitfalls with go's concurrency features

    - channel axioms
    - programmer's quickly grasp the idea of a channel as a queue of values
    - they're also comfortable with the notion that channel operations may block when full or empty
    - here are some less common properties of channels
    - send/receive to a nil channel blocks forever
        - it can be surprising for newcomers that a send on a `nil` channel blocks forever
        ```
        func main() {
        var c chan string
        c <- "let's get started" // deadlock
        }

        func main() {
        var c chan string
        fmt.Println(<-c) // deadlock
        }
        ```

        - blocking forever is useful in a for select conditional, where you want to stop reading on a channel e.g. merging two channels into one
        
    - send to a closed channel panics
        - if you have multiple writers on a channel, and one of them closes it, you need to synchronize with locks before the critical section
        ```
        func main() {
            var c = make(chan int, 100)
            var mu sync.Mutex
            var closed bool

            for i := 0; i < 10; i++ {
                go func() {
                    for j := 0; j < 10; j++ {
                        c <- j
                    }

                    mu.Lock()
                    // the following operation needs to be atomic
                    if !closed {
                        close(c)
                        closed = true
                    }
                    mu.Unlock()
                }()
            }
        }
        ```
    - a receive from a closed channel returns the zero value immediately
        - this is the inverse of the previous
        - instead of looping and recving the channel a hardcoded amount of times, its better to use a for range
        ```
        for v:= range c {
        // do something with v
        }

        // above is syntax sugar for:
        for v, ok := <- c; ok {
        // do something with v
        }
        ```

    - prefer channels with a size of zero or one
        - when dealing with an unknown producer or consumer, choose a buffer size of zero or one
        - a buffer size of zero is ideal for coordination
        - a buffer size of one is ideal to permit the sender to deposit the value without blocking and move on
        - a buffer size greater than one is useful in the case where you know the exaxct number of values that will be deposited in the channel *before* it is drained
        - the most reasonable channel sizes are usually zero and one
        - most other sizes are *guesses*
        - when you guess incorrectly, the program is unreliable

    - keep yourself busy or do the work
        - if your goroutine cannot make progress until it gets the result from another, oftentimes it is simpler to just do the work yourself rather than delegate it
        - this often eliminates a lot of state tracking and channel manipulation to plumb a result back from a goroutine to its initiator

    - leave concurrency to the caller
        ```
        func ListDirectory(dir string) ([]string, error)
        func ListDirectory(dir string) chan string
        ```

        - usually people turn functions async by returning a channel
        - they are most likely firing off a goroutine (which populates the channel), then returning 
        - they *could* allocate a channel to hold all items, fill the channel, close it, and return it, but this has the same problems as consuming a large amount of memory

        - by using a closed channel to signal between two functions, there is no way for the async function to *error* to the caller
            - if the async function's channel returned immediately, there is no way for the caller to tell the difference between an empty return or an error
        
        - the solution to this problem (and the synchronous problem of having to fit everything in memory) is to use a callback
            - this function will be called for every item being iterated over
            - not surprisingly, this is how filepath.WalkDir works

        - if your function starts a goroutine, you must provide the caller with a way to explicitly stop that goroutine
            - it is often easier to leave the decision to execute a function asynchronously to the caller of that function
    - never start a goroutine without knowing when it'll stop
        - this usually means providing an explicit way to stop that goroutine
        - this is what the point above avoids with the callback function
        - if you do *call* (not make) a function asynchronously with go, then usually you must pass in a stop channel so the caller can stop it
        - e.g. if you're starting two servers via goroutines, and want both of them to stop when one stops, you have to do something like this:
        ```
        func main() {
            done := make(chan error, 2)
            stop := make(chan struct{})
            go func() {
                done <- serveDebug(stop)
            }()
            go func() {
                done <- serveApp(stop)
            }()

            var stopped bool
            for i := 0; i < cap(done); i++ {
                if err := <-done; err != nil {
                    fmt.Println("error: %v", err)
                }
                if !stopped {
                    stopped = true
                    close(stop)
                }
            }
        }
        ```
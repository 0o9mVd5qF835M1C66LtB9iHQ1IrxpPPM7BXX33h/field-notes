trpc
====

introduction
  - trpc allows you to easily build & consume fully typesafe apis
		- without schemas
		- without codegen

  - as typescript and static typing becomes best practice in web dev
    - API contracts represent the major pain point
    - we need better ways to *statically type* our API endspoints
    - we need better ways to *share those types* between client and server
      - or server to server

  - trpc is a simple library
    - for building typesafe APIs
    - leveraging fullpower of typescript


  - an alternative to REST and graphql
    - currently, graphql is the dominant way to implement typesafe APIs in typescript
    - since graphql is designed as a language-agnostic spec for API implementation
      - it doesn't fully use the power of typescript
      - if your project is built with fullstack typescript
      - you can share types *directly* between your client and server, without relying on codegen

  - what is trpc for?
    - trpc is for fullstack typescript devs
    - makes it easy to write endpoints
    - type errors with your API contracts will be caught at build time
    - this reduces the surface area for bugs a runtime



@trpc/server
  - a trpc-based backend usually has 5 components
    1. routers
    2. procedures
    3. a single merged router
    4. context
    5. api handlers

  1. define routers
    - initialize trpc
      - you should initialize trpc *exactly once* per application
      - multiple instances of trpc will cause issues

      // server/trpc.ts
      import { initTRPC } from '@trpc/server';

      const t = initTRPC.create();

      export const router = t.router;
      export const middleware = t.middleware;
      export const publicProcedure = t.procedure;


      - you'll notice we are exporting certain methods of the t *variable* here, rather than t itself
      - this is to establish a certain set of procedures that we will use idiomatically in our codebase

    - defining a router
      - next, we define a router with a procedure in our app
      - in order for endpoints to be exposed to the client, the outermost router
        - (in the ex below, this is `appRouter`)
        - needs to be passed to the API Handler's router argument

        // server/_app.ts
        import * as trpc from '@trpc/server'
        import { publicProcedure, router } from './trpc'

        const appRouter = router({
          greeting: publicProcedure.query(() => 'hello trpc v10!'),
        })

        // export only the type of a router!
        // this prevents us from importing server code on the client
        export type AppRouter = typeof appRouter
    - advanced usage
      - when initializing your router, trpc allows you to
        - setup req contexts
        - assign metadata to procedures
        - format and handle errors
        - transform data as needed
        - customize the runtime config

        - you can use method chaining to customize the `t`-object on init

        const t = initTRPC.context<Context>().meta<Meta>().create({

        });

  2. define procedures
    - procedures in trpc are very flexible primitives to create backend functions
    - they use the builder pattern to create reusable base procedures for different parts of your backend application
      - tips
        - a procedure can be viewed as the equivalent of a REST-endpoint for a function
        - there's no internal difference between queries and mutations apart from semantics
        - defining `publicProcedure` is the same for queries, mutations, and subscriptions with one exception
        - the exception is that subscriptions need to return an observable instance


    - input validation with zod
    import { publicProcedure, router } from './trpc'
    import { z } from 'zod'

    export const appRouter = router({
      hello: publicProcedure
        .input(
          z.object({
            text: z.string(),
          })
          .optional()
        )
        .query(({ input }) => {
          return {
            greeting: `hello ${input?.text ?? 'word'}`,
          };
        }),
    });

    export type AppRouter = typeof appRouter;

  




  3. merging routers
    - writing all your API code in the same file is not a great idea
    - it's easy to merge routers with other routers
    
    - merging with child routers (hierarchical namespaces)

    const appRouter = router({
      user: userRouter,
      post: postRouter,
    });
    export type AppRouter = typeof appRouter;

    - merging with t.mergeRouters (flat namespace)
    import { mergeRouters } from '../trpc'

    const appRouter = mergeRouters(userRouter, postRouter)
    export type AppRouter = typeof appRouter;




  4. context
    - your context holds data that all of your trpc procedures will have access to
    - great place for db connections, or auth information

    - setting up context is done in 2 steps
      1. defining the type during init
      2. then creating the runtime context for each req

    import { initTRPC } from '@trpc/server'
    import type { CreateNetContextOptions } from '@tropc/server/adapters/next'
    import { getSession } from 'next-auth/react'

    export const createContext = async (opts: CreateNextContextOptions) => {
      const session = await getSession({ req: opts.req });
    
      return {
        session,
      }
    }


    const t1 = initTRPC.context<typeof createContext>().create();
    t1.procedure.use(({ ctx }) => { ... });


    - this context msut be passed to the handler
    - this handler will mount your appRouter
      - can be HTTP, server-side call, or SSG helper

    

    - inner and outer context
      - in some scenarios, it could makes sense to split up your context into "inenr" and "outter" functions

      - inner context
        - where you define context that doesn't depend on the request
        - e.g. db connection
        - whatever is defined here will *always* be available on your procedures

      - outer context
        - where you define contet that depends on the request
        - e.g. user session
        - whatever is defined here will *only* be available via http
        











  5. api handler
    - trpc is not a backend of its own
    - it lives inside of other backends such as next.js or express
    - trpc is framework agnostic
    
    - the api handler, also called the adapter
      - enables this by acting as the glue bt http requests to your backend and trpc
      - the api handler sits on a route on your server (usually /api/trpc)
      - the api handler processes all requests to that route and its subroutes
      - it receives a request from the server
      - uses `createContext` function to generate context
      - then sends the request and context to a procedure in the router
      - it takes optional args such as `onError`, a cb that runs when an error is thrown inside a procedure

      - nextjs example

      // pages/api/trpc/[trpc].ts

      import { createNextApiHandler } from '@trpc/server/adapters/next'
      import { createContext } from '../../../server/trpc/context'
      import { appRouter } from '../../../server/trpc/router/_app'

      export default createNextApiHandler({
        router: appRouter, // your outermost router
        createContext, // your req contezt
      });

      - advanced usage

      // pages/api/trpc/[trpc].ts
      import { createNextApiHandler } from '@trpc/server/adapters/next'
      import { createContext } from '../../../server/trpc/context'
      import { appRouter } from '../../../server/trpc/router/_app'

      const nextApiHandler = createNextApiHandler({
        router: appRouter,
        createContext,
      });

      export default async function handler(
        req: NextApiRequest,
        res: NextApiResponse,
      ) {
        res.setHader('Access-Control-Allow-Origin', '*');

        return nextApiHandler(req, res);
      }






@trpc/client
  - vanilla client
    - the magic of trpc is making *strongly typed* API calls without relying on code gen
    - with fullstack typescript projects, you can directly import types from the server into the client

    - import the AppRouter type into your client from the file your root trpc router is defined
      - the single type represents the type signature of your entire API

      import type { AppRouter } from '../path/to/server/trpc'

      - the import type keyword lets you import from *any* typescript file on your filesystem
      - plus, import type can only import types, *NOT* code
      - there's no danger of accidentally importing server-side code into the client
      - this is bc all calls to import type are always *fully erased* from your compiled javascript bundle

    - initialize a trpc client
      - create a typesafe client with the createTRPCProxyClient method from @trpc/client
      - and add a links array with a terminating link

      import { createTRPCProxyClient, httpBatchLink } from '@trpc/client';
      import type { AppRouter } from '../path/to/sever/trpc';

      const client = createTRPCProxyClient<AppRouter>({
        links: [
          httpBatchLink({
            url: 'http://localhost:3000/trpc'
          }),
        ],
      });

      - as you can see, we pass AppRouter as a *type argument* of `createTRPCProxyClient`
        - this returns a strongly typed `client` instance
        - this `client` is a proxy this mirrors the structure of your AppRouter on the client

        // client.ts
        const bilbo = await client.getUser.query('id_bilbo');
        const frodo = await client.createUser.mutate({ name: 'Frodo');


  - aborting procedure calls
    - by default,









  - links
    - links enable you to customize the flow of data bt trpc client and server
    - a link should only do one thing
    - it can either be a self-contained modification to a trpc operation (query, mutation, or sub)
    - or a side-effect based on the operation (such as logging)

    - you can compose links together into an array that you provide to the trpc client config via the `links` prop
    - this represents the link chain
    - this means the trpc client will execute the links in the order specified in the array during a req
    - and in reverse order when handling a response



    - the example below assumes you are using next.js
    - but a vanilla trpc client can be used as well

    import { httpBatchLink, loggerLink } from '@trpc/client'
    import { createTRPCNext } from '@trpc/next'

    export default createTRPCNext<AppRouter>({
      config() {
        const url = `http://localhost:3000`

        return {
          links: [
            loggerLink(),
            httpBatchLink({
              url,
            }),
          ],
        }
      }
    })



    - the terminating link
      - the terminating link is the last link in a link chain
      - instead of calling the `next` function
      - the terminating link is responsible for sending your composed trpc operation to the trpc server
      - it returns an OperationResultEnvelope

      - the links array that you add to the trpc client config should have at least one link
        - that link should be the terminating link
        - if there is no terminating link, the trpc operation will *not* be sent to the trpc server
        - `httpBatchLink` is the recommended terminating link by trpc
        - `httpLink` and `wsLink` are other examples of terminating links

        - managing context
          - as an operation moves along your link chain
          - it maintains a context that each link can read and modify
          - this allows links to pass metadata
          - you can obtain the current context object with `op.context`
      












  - create custom ehader
  - cors & cookies















































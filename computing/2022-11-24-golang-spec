introduction
- this is the reference manual for the go programming language
- go is a general-purpose language designed with systems programming in mind
- it is
    - strongly-typed
    - garbage-collected
    - first-class support for concurrent programming
    - simple

blocks
- a block is a possibly empty sequence of declarations and statements with matching brace brackets
```
Block = "{" StatementList "}" .
StatementList = { Statement ";" } .

```
- in addition to explicit blocks in the source code, there are implicit blocks
    1. the universe block encompasses all go source text
    2. each package has a package block containing all go source text for that package
    3. each file has a file block containing all go source text for that package
    4. each if, for, and switch statement is considered to be in its own implicit block
    5. each clause in a switch or select statement acts as an implicit block
- blocks next and influence scoping

expressions
- an expression *specifies* the computation of a value
    - it does this by applying operators and functions to operands

operands
- denote the elementary values in an expression
- operand may be a literal, a variable, function, or a parenthesized expression

operators
- operators combine operands into expressions
- there are five precedence levels for binary operators
- multiplication operators bind strongest, logical OR binds the weakest
```
Precedence    Operator
    5             *  /  %  <<  >>  &  &^
    4             +  -  |  ^
    3             ==  !=  <  <=  >  >=
    2             &&
    1             ||
```
- types of operators
    - arithmetic operators
    - comparison operators
    - logical operators
    - address operators
    - receive operator
    - conversions
    - constant expressions
order of evaluation

statements
- statements control execution
- the majority of golang statements are heavily inspired by C
- my notes will simply summarize the different types of statements in golang
- the notable syntactical differences in golang's statements are perhaps
    - if statement: whose if *expression* can be preceded by a simple statement
    ```
    IfStmt = "if" [ SimpleStmt ";" ] Expression Block [ "else" ( IfStmt | Block ) ] .
    if x := f(); x < y {} else {}
    ```
    - switch statement: can be an expression switch statement or a type switch statement
    ```
    SwitchStmt = ExprSwitchStmt | TypeSwitchStmt .
    ```
    - for statement: can be either controlled by a single condition, a "for" clause, or a "range" clause
    ```
    ForStmt = "for" [ Condition | ForClause | RangeClause ] Block .
    Condition = Expression .
    ```
    - go statement: starts the execution of a function call as an independant concurrent thread of control, or *goroutine*, within the same address space

    - return statement: expression list can be empty if the function's result type specifies name for its result parameters
        - regardless of how the result values are declared, the result values are initialized to the zero values for their type upon entry to the function
        - restrition: a compiler may disallow an empty expression list in a "return" statement if a different entity (constant, type, or variable) with the same name as a result parameter is in scope at the place of the return
        ```
        func f(n int) (res int, err error) {
            if _, err := f(n-1); err != nil {
                return  // invalid return statement: err is shadowed
            }
            return
        }
        ```
    - defer statement:
        - invokes a function whose execution is deferred to the moment the surrounding function returns
        - each time a "defer" statement executes, the function value and parameters to the call are evalauted as usual and saved anew
        - the actual functin is not invoked however
        - the deferred functions are executed *after* result parameters are set by the surrounding function but *before* the function returns to tis caller
            - this means a deferred function may actually access and modify the result parameters before they are returned
            - if a deferred function value evaluates to nil, execution panics whne the function is *invoked*, not when the "defer" statement is executed
            ```
            lock(l)
            defer unlock(l)  // unlocking happens before surrounding function returns

            // prints 3 2 1 0 before surrounding function returns
            for i := 0; i <= 3; i++ {
                defer fmt.Print(i)
            }

            // f returns 42
            func f() (result int) {
                defer func() {
                    // result is accessed after it was set to 6 by the return statement
                    result *= 7
                }()
                return 6
            }
            ```



built-ins
- built-in functions are *predeclared*
- the built-in functions do *not* have standard go types
- they can only appear in call expressions, *not* as function values

- close
    - the built-in function close records that no more values will be sent on the channel
    - it's an error if the channel is a receive-only channel
    - sending to or closing an already-closed channel causes a run-time panic
    - closing a nil channel also causes a run-time panic
    - after calling close, and after any previously sent values have been received, receive operations will return the zero value for the channel's type without blocking

- length and capacity
    - the built-in functions len and cap take arguments of various types
        - not considered operators because golang doesn't actually calculate len
        - it's compiler magic, not an actual function call
    - they both return a result of type int
    - the implementation guarantees that the resut always fits an int
    - the capacity of a slice is the number of elements for which there is space allocated in the underlying array
        - at any time the following relationship holds:
        0 <= len(s) <= cap(s)
    - the len of a nil slice, map, or channel is 0
    - the capacity of a nil slice or channel is 0

- allocation
    - the built-in function new takes a type T, allocates storage for a variable of that type at run time, and returns a value of type *T pointing to it


- making slices, maps, and channels
    - the built-in function make takes a type T, optionally followed by a type-specific list of expressions
        - slice: make(T, n, m)
        - map: make(T, n)
        - ch: make(T, n)
        - note that only slices support a capacity argument (i guess only slices have a dynamic resizing implementation underneath the hood?)

- slices
    - the built-in functions append and copy assist in common slice operations
    ```
    append(s S, x ...E) S // core type of S is []E
    copy(dst, src[]T) int
    ```

- map deletions
    - the built-in function delete removes the element with key k from a map m
    ```
    delete(m, k) // removes element m[k] from map m
    ```
    - if m is nil or m[k] dne, delete is a no-op
- complex numbers
    - three functins assemble and disassemble complex numbers
    ```
    complex(realPart, imaginaryPart floatT) complexT
    real(complexT) floatT
    imag(complexT) floatT
    ```
- handling panics
    - two built-ins, panic and recover, assist in reporting and handling run-time panics and program-defined error conditions
    ```
    func panic(interface{})
    func recover() interface{}
    ```
    - notes from jeff
        - panics are glorified gotos
        - the caller of the function panicking has no control over execution
        - library code could should never panic, or at least never let panics escape program code
        - application code is ok to panic, in scenarios where the program should just quit
    ```
        func f() {
            defer func() {
                if x := recover(); x != nil {
                    log.Println("run time panic: %v", x)
                }
            }()

            g() // panics
        }
    ```


packages
- go programs are constructed by linking packages together
    - in turn, a package is constructed from one or more source files
        - these source files declare constants, types, variables, and functions
        - the elements above are accessible in all files of the same package
        - these elements may be exported and used in another package
- source file organization
    ```
    SourceFile = PackageClause ";" { ImportDecl ";" } { TopLevelDecl ";" } .
    ```

- package clause
    ```
    PackageClause = "package" PackageName .
    PackageName = identifer. // must not be blank
    ```
        
    - a set of files sharing the same package name form the *implementation* of the package

- import declarations
    - an import declaration states that the source file containing the declaration depends on functionality of the imported package
    - the declaration eables access to *exported* identifiers of that package
    - an import declaration declares a dependency relation between the importing and imported package
        - it's illegal for a package to import itself, directly or indirectly
        - it's also illegal to import a package without referring to any of its exported identifiers
        - to import a packafge solely for its side-effects (initialiation) use the black identifier as explicit package name
        ```
        import _ "lib/math" // just like unused variables
        ```
        - the interpretation of the import path is implementation-dependant but it is typically a substring of the full fil name of the compiled package
        ```
        import "lib/math"    math.Sin
        import m "lib/math"  m.Sin
        import . "lib/math"  Sin
        ```

program initialization and execution

errors & run-time panics
- the `error` type is defined as
    ```
    type error interface {
        Error() string
    }
    ```
- execution errors such as out-of-bounds array indexing triggers a run-time panic, which is a built-in function panic with a value of the implementation-defined runtime.
    - that type satisfies the predclared interface type `error`
    - the exact error values that represent distinct run-time error conditions are unspecified
    ```
    package runtime

    type Error interface {
        error
        // and perhaps other methods
    }
    ```

system considerations
- package unsafe
    - the unsafe package provides low-level programming operations that violate the type system
        - golang restricts pointer operations
        - there is no linguistic mechanism to convert between pointers and integers
        - the package unsafe implements this functionality under restricted circumstances
    - a package using unsafe must be vetted manually for type safety and may *not* be portable
        the results of functions from unsafe are consistent in the same program, but they might differ when crossing operating systems, architectures, compilers, compiler versions, etc
    - a package using unsafe is not protected by the Go 1 compatability guidelines
    - func Alignof(x ArbitraryType) uintptr
    - func Offsetof(x ArbitraryType) uintptr
    - func Sizeof(x ArbitraryType) uintptr
    - type Pointer *ArbitraryType
        - equivalent of C's void*


- size and alignmenet guarantees
    - for numeric types, the following sizes in bytes are guaranteed
        byte, uint8, int8                     1 (8 bits)
        uint16, int16                         2 (16 bits)
        uint32, int32, float32                4 (32 bits)
        uint64, int64, float64, complex64     8 (64 bits)
        complex128                           16 (128 bits)
    - a struct or array type has size zero if it contains no fields (or elements, respectively) that have a size greater than zero
    - two distinct zero-size variables may have the same address in memory!